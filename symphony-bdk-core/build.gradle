plugins {
    id 'bdk.java-library-conventions'
    id 'bdk.java-publish-conventions'
    id 'org.openapi.generator'
    id 'de.undercouch.download'
}

description = 'Symphony Java BDK Core'

javadoc {
    options.group 'Core - Configuration', 'com.symphony.bdk.core.config*'
    options.group 'Core - Authentication', 'com.symphony.bdk.core.auth*'
    options.group 'Core - Service', 'com.symphony.bdk.core.service*'
    options.group 'Core - Activity', 'com.symphony.bdk.core.activity*'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
            element = 'CLASS'
            excludes = ['com.symphony.bdk.core.*.model.*', 'com.symphony.bdk.gen.api.*',]
        }
    }
}

dependencies {
    api project(':symphony-bdk-config')
    api project(':symphony-bdk-extension-api')
    api project(':symphony-bdk-http:symphony-bdk-http-api')
    api project(':symphony-bdk-template:symphony-bdk-template-api')

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'net.bytebuddy:byte-buddy:1.12.19'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    api 'org.apiguardian:apiguardian-api'
    implementation 'org.slf4j:slf4j-api'
    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-text'
    implementation 'com.brsanthu:migbase64'
    implementation 'io.jsonwebtoken:jjwt'
    implementation 'org.bouncycastle:bcpkix-jdk18on'
    api 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'io.github.resilience4j:resilience4j-retry'
    implementation 'io.swagger:swagger-annotations'
    implementation 'com.google.code.findbugs:jsr305'
    implementation 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'

    testImplementation project(':symphony-bdk-http:symphony-bdk-http-jersey2')
    testRuntimeOnly project(':symphony-bdk-template:symphony-bdk-template-freemarker')

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.glassfish.jersey.core:jersey-client'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'com.tngtech.archunit:archunit-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'ch.qos.logback:logback-classic'
    testImplementation 'org.mock-server:mockserver-netty'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// OpenAPI code generation
def apiBaseUrl = "https://raw.githubusercontent.com/finos/symphony-api-spec/ee09734380226ac1109a1513156ceefac3bd5a1e"
def generatedFolder = "$buildDir/generated/openapi"
def apisToGenerate = [
        Agent: 'agent/agent-api-public-deprecated.yaml',
        Pod  : 'pod/pod-api-public-deprecated.yaml',
        Auth : 'authenticator/authenticator-api-public-deprecated.yaml',
        Login: 'login/login-api-public.yaml',
]

sourceSets.main.java.srcDirs += "$generatedFolder/src/main/java"

apisToGenerate.each { api, path ->
    def downloadTask = tasks.create(name: "download$api", type: Download) {
        src "$apiBaseUrl/$path"
        dest "$buildDir/openapi/$api/${path.split("/")[1]}"
        overwrite false
        useETag  "all"
    }

    def generateTask = tasks.create(name: "generate$api",
            type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask,
            dependsOn: downloadTask) {
        generatorName = 'java'
        library = 'jersey2'
        outputDir = generatedFolder
        inputSpec = "$buildDir/openapi/$api/${path.split("/")[1]}"
        skipOverwrite = true
        generateApiTests = false
        generateModelTests = false
        generateModelDocumentation = false
        generateApiDocumentation = false
        apiPackage = 'com.symphony.bdk.gen.api'
        modelPackage = 'com.symphony.bdk.gen.api.model'
        invokerPackage = 'com.symphony.bdk.http.api'
        templateDir = "${rootDir}/templates"
        globalProperties = [
                models         : "",
                apis           : "",
                supportingFiles: "false"
        ]
        configOptions = [
                dateLibrary: "java8",
                sortParamsByRequiredFlag: "false"
        ]
    }

    compileJava.dependsOn generateTask
    sourcesJar.dependsOn downloadTask
    sourcesJar.dependsOn generateTask
}

// Duplicated AuthRequest class, we need the one from auth API, so task order matters here
tasks.generateAuth.dependsOn tasks.generateLogin
